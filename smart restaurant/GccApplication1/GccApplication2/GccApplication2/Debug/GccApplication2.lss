
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000038  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000190  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f9  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f7  00000000  00000000  0000044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000122  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000070  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000058  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z10USART_Initv>:
		PORTB=0x00;
		_delay_ms(50);
	}*/

void USART_Init(void){
	UBRRH = 0;
  6c:	e0 e4       	ldi	r30, 0x40	; 64
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	10 82       	st	Z, r1
	UBRRL = 6;
  72:	86 e0       	ldi	r24, 0x06	; 6
  74:	89 b9       	out	0x09, r24	; 9
	UCSRB = ((1<<TXEN)|(1<<RXEN)|(1<<RXCIE));
  76:	88 e9       	ldi	r24, 0x98	; 152
  78:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ((1<<URSEL)|(3<<UCSZ0));
  7a:	86 e8       	ldi	r24, 0x86	; 134
  7c:	80 83       	st	Z, r24
}
  7e:	08 95       	ret

00000080 <_Z9USART_RXCv>:
	//value = UDR;             //read UART register into value
	//}

unsigned char USART_RXC(void)
{
	while (!(UCSRA &(1<<RXC)));
  80:	eb e2       	ldi	r30, 0x2B	; 43
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	88 23       	and	r24, r24
  88:	ec f7       	brge	.-6      	; 0x84 <_Z9USART_RXCv+0x4>
	return(UDR);
  8a:	8c b1       	in	r24, 0x0c	; 12
		
	
}
  8c:	08 95       	ret

0000008e <main>:
#include <util/delay.h>
#include <avr/interrupt.h> 
void USART_Init(void);
unsigned char USART_RXC(void);
//volatile unsigned char value;  //FOR STORING RECIEVE DATA
int main(void){
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
	MCUCSR=(1<<JTD);
  9a:	e4 e5       	ldi	r30, 0x54	; 84
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	80 83       	st	Z, r24
	MCUCSR=(1<<JTD);
  a2:	80 83       	st	Z, r24
	
   USART_Init();  // Initialise USART
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <_Z10USART_Initv>
  a8:	88 ee       	ldi	r24, 0xE8	; 232
  aa:	93 e0       	ldi	r25, 0x03	; 3
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  ac:	20 e9       	ldi	r18, 0x90	; 144
  ae:	31 e0       	ldi	r19, 0x01	; 1
  b0:	f9 01       	movw	r30, r18
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b8:	d9 f7       	brne	.-10     	; 0xb0 <main+0x22>
   _delay_ms(100);
  // sei();         // enable all interrupts
   DDRA |= (1<<PA6)|(1<<PA7);
  ba:	ea e3       	ldi	r30, 0x3A	; 58
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	80 83       	st	Z, r24
   PORTA|=(0<<PA6);
  c4:	eb e3       	ldi	r30, 0x3B	; 59
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 83       	st	Z, r24
   for(;;){
	  // while(!(UCSRA & (1<<RXC)));    // Repeat indefinitely
         char value = USART_RXC();
		 if(value=='a') // may be other characters 
		
		{PORTA |= 1<<PA6; // Put LED in pin B7
  cc:	0b e3       	ldi	r16, 0x3B	; 59
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	0f 2e       	mov	r0, r31
  d2:	f0 e2       	ldi	r31, 0x20	; 32
  d4:	ef 2e       	mov	r14, r31
  d6:	fe e4       	ldi	r31, 0x4E	; 78
  d8:	ff 2e       	mov	r15, r31
  da:	f0 2d       	mov	r31, r0
  dc:	c0 e9       	ldi	r28, 0x90	; 144
  de:	d1 e0       	ldi	r29, 0x01	; 1
  // sei();         // enable all interrupts
   DDRA |= (1<<PA6)|(1<<PA7);
   PORTA|=(0<<PA6);
   for(;;){
	  // while(!(UCSRA & (1<<RXC)));    // Repeat indefinitely
         char value = USART_RXC();
  e0:	0e 94 40 00 	call	0x80	; 0x80 <_Z9USART_RXCv>
		 if(value=='a') // may be other characters 
  e4:	81 36       	cpi	r24, 0x61	; 97
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x52>
		
		{PORTA |= 1<<PA6; // Put LED in pin B7
  e8:	f8 01       	movw	r30, r16
  ea:	80 81       	ld	r24, Z
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	80 83       	st	Z, r24
  f0:	97 01       	movw	r18, r14
  f2:	ce 01       	movw	r24, r28
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fc:	d1 f7       	brne	.-12     	; 0xf2 <main+0x64>
		_delay_ms(2000);
		PORTA |= (0<<PA6);
  fe:	f8 01       	movw	r30, r16
 100:	80 81       	ld	r24, Z
 102:	80 83       	st	Z, r24
 104:	ed cf       	rjmp	.-38     	; 0xe0 <main+0x52>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
