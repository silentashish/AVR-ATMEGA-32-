
ADCexample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000346  2**0
                  ALLOC
  2 .stab         00000e88  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000214  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000013e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c4  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000101  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000299  00000000  00000000  0000192d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e9  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000196  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 00 	call	0xca	; 0xca <main>
  9e:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupADC>:
	}
}

void setupADC()
{
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2);
  a6:	85 e4       	ldi	r24, 0x45	; 69
  a8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  ac:	8f e8       	ldi	r24, 0x8F	; 143
  ae:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1 << ADC5D);
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	80 93 7e 00 	sts	0x007E, r24
	
	startConversion();
  b8:	0e 94 5f 00 	call	0xbe	; 0xbe <startConversion>
}
  bc:	08 95       	ret

000000be <startConversion>:

void startConversion()
{
	ADCSRA |= (1 << ADSC);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
}
  c8:	08 95       	ret

000000ca <main>:

double dutyCycle = 0;

int main(void)
{
	DDRD = (1 << PORTD6);
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A = (1 << COM0A1) | (1 << WGM00) | (1 << WGM01);
  ce:	83 e8       	ldi	r24, 0x83	; 131
  d0:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << TOIE0);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 6e 00 	sts	0x006E, r24
	
	setupADC();
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <setupADC>
	
	sei();
  dc:	78 94       	sei
	
	TCCR0B = (1 << CS00) | (1 << CS02);
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	85 bd       	out	0x25, r24	; 37
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x18>

000000e4 <__vector_16>:
{
	ADCSRA |= (1 << ADSC);
}

ISR(TIMER0_OVF_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	OCR0A = dutyCycle;
 106:	60 91 00 01 	lds	r22, 0x0100
 10a:	70 91 01 01 	lds	r23, 0x0101
 10e:	80 91 02 01 	lds	r24, 0x0102
 112:	90 91 03 01 	lds	r25, 0x0103
 116:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__fixunssfsi>
 11a:	67 bd       	out	0x27, r22	; 39
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_21>:

ISR(ADC_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	dutyCycle = ADC;
 160:	60 91 78 00 	lds	r22, 0x0078
 164:	70 91 79 00 	lds	r23, 0x0079
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 01 01 	call	0x202	; 0x202 <__floatunsisf>
 170:	dc 01       	movw	r26, r24
 172:	cb 01       	movw	r24, r22
 174:	80 93 00 01 	sts	0x0100, r24
 178:	90 93 01 01 	sts	0x0101, r25
 17c:	a0 93 02 01 	sts	0x0102, r26
 180:	b0 93 03 01 	sts	0x0103, r27
	startConversion();
 184:	0e 94 5f 00 	call	0xbe	; 0xbe <startConversion>
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__fixunssfsi>:
 1aa:	70 d0       	rcall	.+224    	; 0x28c <__fp_splitA>
 1ac:	88 f0       	brcs	.+34     	; 0x1d0 <__fixunssfsi+0x26>
 1ae:	9f 57       	subi	r25, 0x7F	; 127
 1b0:	90 f0       	brcs	.+36     	; 0x1d6 <__fixunssfsi+0x2c>
 1b2:	b9 2f       	mov	r27, r25
 1b4:	99 27       	eor	r25, r25
 1b6:	b7 51       	subi	r27, 0x17	; 23
 1b8:	a0 f0       	brcs	.+40     	; 0x1e2 <__fixunssfsi+0x38>
 1ba:	d1 f0       	breq	.+52     	; 0x1f0 <__fixunssfsi+0x46>
 1bc:	66 0f       	add	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	1a f0       	brmi	.+6      	; 0x1cc <__fixunssfsi+0x22>
 1c6:	ba 95       	dec	r27
 1c8:	c9 f7       	brne	.-14     	; 0x1bc <__fixunssfsi+0x12>
 1ca:	12 c0       	rjmp	.+36     	; 0x1f0 <__fixunssfsi+0x46>
 1cc:	b1 30       	cpi	r27, 0x01	; 1
 1ce:	81 f0       	breq	.+32     	; 0x1f0 <__fixunssfsi+0x46>
 1d0:	77 d0       	rcall	.+238    	; 0x2c0 <__fp_zero>
 1d2:	b1 e0       	ldi	r27, 0x01	; 1
 1d4:	08 95       	ret
 1d6:	74 c0       	rjmp	.+232    	; 0x2c0 <__fp_zero>
 1d8:	67 2f       	mov	r22, r23
 1da:	78 2f       	mov	r23, r24
 1dc:	88 27       	eor	r24, r24
 1de:	b8 5f       	subi	r27, 0xF8	; 248
 1e0:	39 f0       	breq	.+14     	; 0x1f0 <__fixunssfsi+0x46>
 1e2:	b9 3f       	cpi	r27, 0xF9	; 249
 1e4:	cc f3       	brlt	.-14     	; 0x1d8 <__fixunssfsi+0x2e>
 1e6:	86 95       	lsr	r24
 1e8:	77 95       	ror	r23
 1ea:	67 95       	ror	r22
 1ec:	b3 95       	inc	r27
 1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__fixunssfsi+0x3c>
 1f0:	3e f4       	brtc	.+14     	; 0x200 <__fixunssfsi+0x56>
 1f2:	90 95       	com	r25
 1f4:	80 95       	com	r24
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	8f 4f       	sbci	r24, 0xFF	; 255
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	08 95       	ret

00000202 <__floatunsisf>:
 202:	e8 94       	clt
 204:	09 c0       	rjmp	.+18     	; 0x218 <__floatsisf+0x12>

00000206 <__floatsisf>:
 206:	97 fb       	bst	r25, 7
 208:	3e f4       	brtc	.+14     	; 0x218 <__floatsisf+0x12>
 20a:	90 95       	com	r25
 20c:	80 95       	com	r24
 20e:	70 95       	com	r23
 210:	61 95       	neg	r22
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	8f 4f       	sbci	r24, 0xFF	; 255
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	99 23       	and	r25, r25
 21a:	a9 f0       	breq	.+42     	; 0x246 <__floatsisf+0x40>
 21c:	f9 2f       	mov	r31, r25
 21e:	96 e9       	ldi	r25, 0x96	; 150
 220:	bb 27       	eor	r27, r27
 222:	93 95       	inc	r25
 224:	f6 95       	lsr	r31
 226:	87 95       	ror	r24
 228:	77 95       	ror	r23
 22a:	67 95       	ror	r22
 22c:	b7 95       	ror	r27
 22e:	f1 11       	cpse	r31, r1
 230:	f8 cf       	rjmp	.-16     	; 0x222 <__floatsisf+0x1c>
 232:	fa f4       	brpl	.+62     	; 0x272 <__floatsisf+0x6c>
 234:	bb 0f       	add	r27, r27
 236:	11 f4       	brne	.+4      	; 0x23c <__floatsisf+0x36>
 238:	60 ff       	sbrs	r22, 0
 23a:	1b c0       	rjmp	.+54     	; 0x272 <__floatsisf+0x6c>
 23c:	6f 5f       	subi	r22, 0xFF	; 255
 23e:	7f 4f       	sbci	r23, 0xFF	; 255
 240:	8f 4f       	sbci	r24, 0xFF	; 255
 242:	9f 4f       	sbci	r25, 0xFF	; 255
 244:	16 c0       	rjmp	.+44     	; 0x272 <__floatsisf+0x6c>
 246:	88 23       	and	r24, r24
 248:	11 f0       	breq	.+4      	; 0x24e <__floatsisf+0x48>
 24a:	96 e9       	ldi	r25, 0x96	; 150
 24c:	11 c0       	rjmp	.+34     	; 0x270 <__floatsisf+0x6a>
 24e:	77 23       	and	r23, r23
 250:	21 f0       	breq	.+8      	; 0x25a <__floatsisf+0x54>
 252:	9e e8       	ldi	r25, 0x8E	; 142
 254:	87 2f       	mov	r24, r23
 256:	76 2f       	mov	r23, r22
 258:	05 c0       	rjmp	.+10     	; 0x264 <__floatsisf+0x5e>
 25a:	66 23       	and	r22, r22
 25c:	71 f0       	breq	.+28     	; 0x27a <__floatsisf+0x74>
 25e:	96 e8       	ldi	r25, 0x86	; 134
 260:	86 2f       	mov	r24, r22
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	2a f0       	brmi	.+10     	; 0x272 <__floatsisf+0x6c>
 268:	9a 95       	dec	r25
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	88 1f       	adc	r24, r24
 270:	da f7       	brpl	.-10     	; 0x268 <__floatsisf+0x62>
 272:	88 0f       	add	r24, r24
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	97 f9       	bld	r25, 7
 27a:	08 95       	ret

0000027c <__fp_split3>:
 27c:	57 fd       	sbrc	r21, 7
 27e:	90 58       	subi	r25, 0x80	; 128
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	59 f0       	breq	.+22     	; 0x29c <__fp_splitA+0x10>
 286:	5f 3f       	cpi	r21, 0xFF	; 255
 288:	71 f0       	breq	.+28     	; 0x2a6 <__fp_splitA+0x1a>
 28a:	47 95       	ror	r20

0000028c <__fp_splitA>:
 28c:	88 0f       	add	r24, r24
 28e:	97 fb       	bst	r25, 7
 290:	99 1f       	adc	r25, r25
 292:	61 f0       	breq	.+24     	; 0x2ac <__fp_splitA+0x20>
 294:	9f 3f       	cpi	r25, 0xFF	; 255
 296:	79 f0       	breq	.+30     	; 0x2b6 <__fp_splitA+0x2a>
 298:	87 95       	ror	r24
 29a:	08 95       	ret
 29c:	12 16       	cp	r1, r18
 29e:	13 06       	cpc	r1, r19
 2a0:	14 06       	cpc	r1, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	f2 cf       	rjmp	.-28     	; 0x28a <__fp_split3+0xe>
 2a6:	46 95       	lsr	r20
 2a8:	f1 df       	rcall	.-30     	; 0x28c <__fp_splitA>
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <__fp_splitA+0x30>
 2ac:	16 16       	cp	r1, r22
 2ae:	17 06       	cpc	r1, r23
 2b0:	18 06       	cpc	r1, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	f1 cf       	rjmp	.-30     	; 0x298 <__fp_splitA+0xc>
 2b6:	86 95       	lsr	r24
 2b8:	71 05       	cpc	r23, r1
 2ba:	61 05       	cpc	r22, r1
 2bc:	08 94       	sec
 2be:	08 95       	ret

000002c0 <__fp_zero>:
 2c0:	e8 94       	clt

000002c2 <__fp_szero>:
 2c2:	bb 27       	eor	r27, r27
 2c4:	66 27       	eor	r22, r22
 2c6:	77 27       	eor	r23, r23
 2c8:	cb 01       	movw	r24, r22
 2ca:	97 f9       	bld	r25, 7
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
